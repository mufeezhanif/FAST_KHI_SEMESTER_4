#include<unistd.h>
int main()
{	char buffer[7];
	read(2, buffer, 7);
	write(1, buffer, 7);


}



#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include<unistd.h>

int main()
{	
	int fd;
	char buff[40];
	fd = open("systemcalls.txt", O_RDONLY);
	printf("file descriptor %d", fd);
	read(fd, buff, 10);
	write(1, buff, 10);
// you can add close --- close(fd2);

}

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>

int main()
{
	pid_t f;
	f= fork();
	if(f<0)
		printf("error");
	else if(f==0) // child process create successfully
		{
			// sleep(4) -- you can use sleep() system call in child  not wait().
			printf("child having pid %d \n",getpid());
			
			printf("Parent having pid %d \n",getppid());
		}		
	else //if f>0; parent process
		{
			printf("Parent having pid %d \n",getpid());
			printf("My child having pid %d \n",f);
		
		}



}




#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>


int main()
{
	pid_t f;
	int status;
	f= fork();
	if(f<0)
		printf("error");
	else if(f==0) // child process create successfully
		{	//
			printf("child having pid %d \n",getpid());
			printf("Parent having pid %d \n",getppid());
		}		
	else //if f>0; parent process
		{	
			//wait(NULL);
			
		wait(&status); // Parent waits for child and gets status

        	if (WIFEXITED(status)) { // Checks if child exited normally
            	printf("Child exited with status %d\n",WEXITSTATUS(status));
        } else {
            printf("Child did not terminate normally\n");
        }
			printf("Parent having pid %d \n",getpid());
			printf("My child having pid %d \n",f);
		
		}



}


#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>


int main()
{
	pid_t f;
	f= fork();
	if(f<0)
		printf("error");
	else if(f==0) // child process create successfully
		{
			  execlp("ls", "ls", "-a", NULL);
			printf("child having pid %d \n",getpid());
			printf("Parent having pid %d \n",getppid());
		}		
	else //if f>0; parent process
		{	
			wait(NULL);
			
			
			printf("Parent having pid %d \n",getpid());
			printf("My child having pid %d \n",f);
		
		}



}
